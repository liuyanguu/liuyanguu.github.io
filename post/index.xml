<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Welcome to my blog</title>
    <link>https://liuyanguu.github.io/post/</link>
    <description>Recent content in Posts on Welcome to my blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://liuyanguu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MPIDR COVID Age Overview</title>
      <link>https://liuyanguu.github.io/post/2021/01/06/mpidr-covid-age-overview/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2021/01/06/mpidr-covid-age-overview/</guid>
      <description>Global confirmed cases and deathsGlobal confirmed casesGlobal deathsAge pyramid using MPIDR COVeAGE-DB databaseDisaggregated by ageDisaggregated by age and sexGlobal confirmed cases and deathsSources: Max Planck Institute for Demographic Research (MPIDR) COVeAGE-DB database and CSSE at Johns Hopkins University (JHU)
Global confirmed cases{&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;data&#34;:[[&#34;Total&#34;,&#34;Female&#34;,&#34;Male&#34;],[&#34;86,405,927&#34;,&#34;&#34;,&#34;&#34;],[&#34;32,954,752&#34;,&#34;10,731,099&#34;,&#34;10,908,224&#34;],[&#34;38%&#34;,null,null],[96,70,71],[&#34;501,302&#34;,&#34;147,600&#34;,&#34;161,770&#34;],[&#34;639,047&#34;,&#34;201,019&#34;,&#34;216,327&#34;],[&#34;974,055&#34;,&#34;312,301&#34;,&#34;334,890&#34;],[&#34;1,632,949&#34;,&#34;504,751&#34;,&#34;532,241&#34;],[&#34;3,747,353 (11%)&#34;,&#34;1,165,671 (11%)&#34;,&#34;1,245,228 (11%)&#34;]],&#34;container&#34;:&#34;\n \n \n Sex\n JHU\n MPIDR\n MPIDR/JHU(%)\n MPIDR Number\nof Countries\n Age\n 0-4\n Age\n 5-9\n Age\n 10-14\n Age\n 15-19\n Age\n 0-19\n \n \n&#34;</description>
    </item>
    
    <item>
      <title>US and China Admin1 COVID19 mortality and incidence rate</title>
      <link>https://liuyanguu.github.io/post/2020/06/14/us-and-china-admin1-covid19-mortality-and-incidence-rate/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2020/06/14/us-and-china-admin1-covid19-mortality-and-incidence-rate/</guid>
      <description>USChinaCompared to lung cancer mortalitySimilar to the last heatmap post I just revised, here I wrapped up the function and showing COVID-19 data just downloaded from JHU CSSE Github page. The function can take a given dataset and plot designated variable.
Code hosted on my Github repo.
US# major function, can download from Github repo Blogdown/hugo-xmag/Codesource(here::here(&amp;quot;Code/COVID_make_map.R&amp;quot;))# USdt_JUH_US &amp;lt;- get.JHU.us.state()make_heatmap(data = dt_JUH_US, geo_data = get_state_name(),state_var = &amp;quot;Province_State&amp;quot;, fill_var = &amp;quot;Mortality_Rate&amp;quot;, label_var = &amp;quot;abb&amp;quot;)us_maps &amp;lt;- lapply(c(&amp;quot;Mortality_Rate&amp;quot;, &amp;quot;Incident_Rate&amp;quot;, &amp;quot;Testing_Rate&amp;quot;, &amp;quot;Hospitalization_Rate&amp;quot;),make_heatmap, data = dt_JUH_US, geo_data = get_state_name(),state_var = &amp;quot;Province_State&amp;quot;, label_var = &amp;quot;abb&amp;quot;)plot_grid &amp;lt;- gridExtra::grid.</description>
    </item>
    
    <item>
      <title>ggplot US state and China province heatmap</title>
      <link>https://liuyanguu.github.io/post/2020/06/12/ggplot-us-state-and-china-province-heatmap/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2020/06/12/ggplot-us-state-and-china-province-heatmap/</guid>
      <description>1. US Map by state Method 1. Use usmap Method 2. Use map_data and build from shape files 2. China map by province Method 1. China map by province using downloaded shap files Method 2. Using geojsonMap (leaflet) (Updated on 2020-06-12, First posted on 2019-04-17) It sounds easy but turned out not as straight-forward as I thought. I will show: 50-state (including Alaska and Hawaii) United States thematic map, with</description>
    </item>
    
    <item>
      <title>Working with 3D array as long-format data in R</title>
      <link>https://liuyanguu.github.io/post/2020/01/11/working-with-3d-array-as-long-format-data-in-r/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2020/01/11/working-with-3d-array-as-long-format-data-in-r/</guid>
      <description>Example: a 3-D array with dimension 4x3x2Melt into longRecover the arraycheck.and.install.pkgs &amp;lt;- function(pkgs){new.packages &amp;lt;- pkgs[!pkgs %in% installed.packages()[,&amp;quot;Package&amp;quot;]]if(length(new.packages)) install.packages(new.packages, dependencies = TRUE)suppressPackageStartupMessages(invisible(lapply(pkgs, library, character.only = TRUE)))}check.and.install.pkgs(c(&amp;quot;data.table&amp;quot;, &amp;quot;reshape2&amp;quot;, &amp;quot;scatterplot3d&amp;quot;))Happy New Year!
Recently I spent some time working with array in R.
I believe it is a bad idea to work with array using for loop, which is both slow and error-prone.</description>
    </item>
    
    <item>
      <title>Drake: powerful tool for automatic reproducible workflow</title>
      <link>https://liuyanguu.github.io/post/2019/09/15/drake-powerful-tool-for-automatic-reproducible-workflow/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2019/09/15/drake-powerful-tool-for-automatic-reproducible-workflow/</guid>
      <description>drake is a powerful tool for automatic reproducible workflow. I found it a perfect match when used together with RMarkdown. There are great documentations online for drake thus here I only show a simple example working with RMarkdown.
RMarkdown file could be very slow to generate if lots of calculations are involved. Any small revise makes you rerun everything. When we use drake we can do all the calculations in advance thus the rendering is super fast since we only need to re-do the revised object.</description>
    </item>
    
    <item>
      <title>Notes on writing an R package</title>
      <link>https://liuyanguu.github.io/post/2019/07/28/some-experience-on-writing-r-package/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2019/07/28/some-experience-on-writing-r-package/</guid>
      <description>Some of my own experienceOn descriptionNamespaceload vs attachDocumentationPotential problems when checking the packageSome nice suggestions from the CRAN team when submitting the packageAlthough ‘SHAPforxgboost’ is not a package too complicated, it took me some time to get the package pass all the cran check. Now (Aug.03,2019) it is available on cran. Install by either
install.packages(&amp;quot;SHAPforxgboost&amp;quot;)or</description>
    </item>
    
    <item>
      <title>SHAP for XGBoost in R: SHAPforxgboost</title>
      <link>https://liuyanguu.github.io/post/2019/07/18/visualization-of-shap-for-xgboost/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2019/07/18/visualization-of-shap-for-xgboost/</guid>
      <description>The SHAPforxgboost packageWhy SHAP valuesLocal explanationConsistency in global feature importanceSHAP plotsSummary plotDependence plotInteraction effectsSHAP force plotReferencesThe SHAPforxgboost packageI wrote the R package SHAPforxgboost to cover all the plotting functions illustrated in this post. This post serves as the vignette for the package.
Please install from CRAN or Github.
install.packages(&amp;quot;SHAPforxgboost&amp;quot;)# or devtools::install_github(&amp;quot;liuyanguu/SHAPforxgboost&amp;quot;)Why SHAP valuesSHAP’s main advantages are local explanation and consistency in global model structure.</description>
    </item>
    
    <item>
      <title>Shiny in Blogdown</title>
      <link>https://liuyanguu.github.io/post/2019/02/24/shiny-in-blogdown/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2019/02/24/shiny-in-blogdown/</guid>
      <description>How to embed ShinyMy Shiny app exampleHow to embed ShinySince Blogdown is for static websites, it cannot run Shiny in rmarkdown directly. According to discussion here and document here.
The only way to do it is using iframe and write outside the chunk:
&amp;lt;iframe src=&#34;https://liuyanguu.shinyapps.io/bcl_app/&#34; width=1000 height=800&#34;&amp;gt;&amp;lt;/iframe&amp;gt;
There is also a built-in function in knitr to do the same thing and write in the chunk.</description>
    </item>
    
    <item>
      <title>Study shrinkage and DART in xgboost modeling using a simple dataset</title>
      <link>https://liuyanguu.github.io/post/2018/11/15/xgboost-dart-example/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2018/11/15/xgboost-dart-example/</guid>
      <description>DataShrinkageDART: Dropout - MARTskip_droprate_dropone_dropIt is always a good idea to study the packaged algorithm with a simple example. Inspired by my colleague Kodi’s excellent work showing how xgboost handles missing values, I tried a simple 5x2 dataset to show how shrinkage and DART influence the growth of trees in the model.
Dataset.seed(123)n0 &amp;lt;- 5X &amp;lt;- data.</description>
    </item>
    
    <item>
      <title>SHAP Visualization in R (first post)</title>
      <link>https://liuyanguu.github.io/post/2018/10/14/shap-visualization-for-xgboost/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2018/10/14/shap-visualization-for-xgboost/</guid>
      <description>Example 1SHAP summary plotAlternative ways:SHAP dependence plotSHAP interaction effect plotSHAP force plotExample 2Summary plotDependence plot for each featureForce plotStack plot by clustering groupsUpdate 19/07/21:
Since my R Package SHAPforxgboost has been released on CRAN, I updated this post using the new functions and illustrate how to use these functions using two datasets. For more information, please refer to: SHAP visualization for XGBoost in R</description>
    </item>
    
    <item>
      <title>Spatial data in R: Dividing raster layers into equal-area rings</title>
      <link>https://liuyanguu.github.io/post/2018/07/20/spatial-data-in-r-dividing-raster-layers-into-equal-area-rings/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2018/07/20/spatial-data-in-r-dividing-raster-layers-into-equal-area-rings/</guid>
      <description>Saturation in ten cities with equal-area ringsR Code for one cityResults for the ring saturationsAverage saturation in each ringMethodologyOriginal CodeThis data visualization example include:
* Import .img file as a raster
* Turn raster into a data.frame of points (coordinates) and values
* Dividing the points into 100 equal-area rings
* Calculate Built-up Area/Urban Extent for each ring
* Turn dataframe into raster</description>
    </item>
    
    <item>
      <title>How to Draw Heatmap with Colorful Dendrogram</title>
      <link>https://liuyanguu.github.io/post/2018/07/16/how-to-draw-heatmap-with-colorful-dendrogram/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2018/07/16/how-to-draw-heatmap-with-colorful-dendrogram/</guid>
      <description>DataVersion 1: Color both the branches and labelsVersion 2: color only the labels.Version 3: If there is no color, and we do not reorder the branchesThis data visualization example include:
* Hierarchical clustering, dendrogram and heat map based on normalized odds ratios
* The dendrogram was built separately to give color to dendrogram’s branches/labels based on cluster using dendextend
* Heatmap is made by heatmap.</description>
    </item>
    
    <item>
      <title>eXtreme Gradient Boosting (XGBoost): Better than random forest or gradient boosting</title>
      <link>https://liuyanguu.github.io/post/2018/07/09/extreme-gradient-boosting-xgboost-better-than-random-forest-or-gradient-boosting/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2018/07/09/extreme-gradient-boosting-xgboost-better-than-random-forest-or-gradient-boosting/</guid>
      <description>OverviewAbout the Data1. Extreme Gradient Boosting2. Gradient boosting3. Random Forest4. Lasso5. Best SubsetCompare MSEsOriginal Code are stored on githubOverviewI recently had the great pleasure to meet with Professor Allan Just and he introduced me to eXtreme Gradient Boosting (XGBoost). I have extended the earlier work on my old blog by comparing the results across XGBoost, Gradient Boosting (GBM), Random Forest, Lasso, and Best Subset.</description>
    </item>
    
    <item>
      <title>Catalog of my old blog</title>
      <link>https://liuyanguu.github.io/post/2018/07/01/catalogue-of-my-old-blog/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2018/07/01/catalogue-of-my-old-blog/</guid>
      <description>Introducing my new blog written solely in R MarkdownWhen I realized it was so convenient to write blog directly using R Markdown, I searched if there is a specific tool for it. And I found Blogdown, an R package developed by Yihui Xie, who also developed R Markdown.
CatalogAs a summary, I would like to create a catalog for the main topics I wrote on google blogger before July 2018.</description>
    </item>
    
  </channel>
</rss>
