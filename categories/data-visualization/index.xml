<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Visualization on Welcome to my blog</title>
    <link>https://liuyanguu.github.io/categories/data-visualization/</link>
    <description>Recent content in Data Visualization on Welcome to my blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://liuyanguu.github.io/categories/data-visualization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How many children under 5 worldwide?</title>
      <link>https://liuyanguu.github.io/post/2024/12/13/how-many-children-under-5-worldwide/</link>
      <pubDate>Fri, 13 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2024/12/13/how-many-children-under-5-worldwide/</guid>
      <description>Since these figures are not directly available via Google search, I calculated them using the mid-year population estimates from the World Population Prospects (WPP) 2024:
World Population: In 2024, the global population is estimated at 8.2 billion (8,162 million). The population is projected to peak in 2084 at 10.3 billion.
Children Under 5 Years Old: The number of children under 5 is 647 million in 2024. This figure peaked in 2017 at 698 million and is projected to decline to 550 million by 2100.</description>
    </item>
    
    <item>
      <title>Plot multiple countries on the world map</title>
      <link>https://liuyanguu.github.io/post/2023/05/29/plot-multiple-countries-on-the-world-map/</link>
      <pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2023/05/29/plot-multiple-countries-on-the-world-map/</guid>
      <description>This post will show it’s quite easy to download and plot the administrative areas of multiple countries on the world map.I will also showcase a bug that puzzled me for a long time and I recently figured out: strange connecting lines among countries!
The most straightforward way(You may download the world map from Github)
suppressPackageStartupMessages({library(&amp;quot;data.table&amp;quot;)library(&amp;quot;ggplot2&amp;quot;)library(&amp;quot;rgdal&amp;quot;)library(&amp;quot;raster&amp;quot;)library(&amp;quot;rgeos&amp;quot;)library(&amp;quot;here&amp;quot;)library(&amp;quot;ggthemes&amp;quot;)})# download data from GADM directly and row-bind the spatial polygons data framecnames &amp;lt;- c(&amp;quot;Haiti&amp;quot;, &amp;quot;Togo&amp;quot;, &amp;quot;Uganda&amp;quot;, &amp;quot;Ghana&amp;quot;, &amp;quot;South Africa&amp;quot;, &amp;quot;Angola&amp;quot;)download.</description>
    </item>
    
    <item>
      <title>US and China Admin1 COVID19 mortality and incidence rate</title>
      <link>https://liuyanguu.github.io/post/2020/06/14/us-and-china-admin1-covid19-mortality-and-incidence-rate/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2020/06/14/us-and-china-admin1-covid19-mortality-and-incidence-rate/</guid>
      <description>USChinaCompared to lung cancer mortalitySimilar to the last heatmap post I just revised, here I wrapped up the function and showing COVID-19 data just downloaded from JHU CSSE Github page. The function can take a given dataset and plot designated variable.
Code hosted on my Github repo.
US# major function, can download from Github repo Blogdown/hugo-xmag/Codesource(here::here(&amp;quot;Code/COVID_make_map.R&amp;quot;))# USdt_JUH_US &amp;lt;- get.JHU.us.state()make_heatmap(data = dt_JUH_US, geo_data = get_state_name(),state_var = &amp;quot;Province_State&amp;quot;, fill_var = &amp;quot;Mortality_Rate&amp;quot;, label_var = &amp;quot;abb&amp;quot;)us_maps &amp;lt;- lapply(c(&amp;quot;Mortality_Rate&amp;quot;, &amp;quot;Incident_Rate&amp;quot;, &amp;quot;Testing_Rate&amp;quot;, &amp;quot;Hospitalization_Rate&amp;quot;),make_heatmap, data = dt_JUH_US, geo_data = get_state_name(),state_var = &amp;quot;Province_State&amp;quot;, label_var = &amp;quot;abb&amp;quot;)plot_grid &amp;lt;- gridExtra::grid.</description>
    </item>
    
    <item>
      <title>ggplot US state and China province heatmap</title>
      <link>https://liuyanguu.github.io/post/2020/06/12/ggplot-us-state-and-china-province-heatmap/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2020/06/12/ggplot-us-state-and-china-province-heatmap/</guid>
      <description>1. US Map by state Method 1. Use usmap Method 2. Use map_data and build from shape files 2. China map by province Method 1. China map by province using downloaded shap files Method 2. Using geojsonMap (leaflet) (Updated on 2020-06-12, First posted on 2019-04-17) It sounds easy but turned out not as straight-forward as I thought. I will show: 50-state (including Alaska and Hawaii) United States thematic map, with</description>
    </item>
    
    <item>
      <title>SHAP for XGBoost in R: SHAPforxgboost</title>
      <link>https://liuyanguu.github.io/post/2019/07/18/visualization-of-shap-for-xgboost/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2019/07/18/visualization-of-shap-for-xgboost/</guid>
      <description>The SHAPforxgboost packageWhy SHAP valuesLocal explanationConsistency in global feature importanceSHAP plotsSummary plotDependence plotInteraction effectsSHAP force plotReferencesThe SHAPforxgboost packageI wrote the R package SHAPforxgboost to cover all the plotting functions illustrated in this post. This post serves as the vignette for the package.
Please install from CRAN or Github.
install.packages(&amp;quot;SHAPforxgboost&amp;quot;)# or devtools::install_github(&amp;quot;liuyanguu/SHAPforxgboost&amp;quot;)Why SHAP valuesSHAP’s main advantages are local explanation and consistency in global model structure.</description>
    </item>
    
    <item>
      <title>Shiny in Blogdown</title>
      <link>https://liuyanguu.github.io/post/2019/02/24/shiny-in-blogdown/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2019/02/24/shiny-in-blogdown/</guid>
      <description>How to embed ShinyMy Shiny app exampleHow to embed ShinySince Blogdown is for static websites, it cannot run Shiny in rmarkdown directly. According to discussion here and document here.
The only way to do it is using iframe and write outside the chunk:
&amp;lt;iframe src=&#34;https://liuyanguu.shinyapps.io/bcl_app/&#34; width=1000 height=800&#34;&amp;gt;&amp;lt;/iframe&amp;gt;
There is also a built-in function in knitr to do the same thing and write in the chunk. The only difference is that we can only set height, and the shiny app would appear slightly different with the siderbarPanel at the top and the mainPanel beneath it.</description>
    </item>
    
    <item>
      <title>SHAP Visualization in R (first post)</title>
      <link>https://liuyanguu.github.io/post/2018/10/14/shap-visualization-for-xgboost/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2018/10/14/shap-visualization-for-xgboost/</guid>
      <description>Example 1SHAP summary plotAlternative ways:SHAP dependence plotSHAP interaction effect plotSHAP force plotExample 2Summary plotDependence plot for each featureForce plotStack plot by clustering groupsUpdate 19/07/21:
Since my R Package SHAPforxgboost has been released on CRAN, I updated this post using the new functions and illustrate how to use these functions using two datasets. For more information, please refer to: SHAP visualization for XGBoost in R</description>
    </item>
    
    <item>
      <title>Spatial data in R: Dividing raster layers into equal-area rings</title>
      <link>https://liuyanguu.github.io/post/2018/07/20/spatial-data-in-r-dividing-raster-layers-into-equal-area-rings/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2018/07/20/spatial-data-in-r-dividing-raster-layers-into-equal-area-rings/</guid>
      <description>Saturation in ten cities with equal-area ringsR Code for one cityResults for the ring saturationsAverage saturation in each ringMethodologyOriginal CodeThis data visualization example include:
* Import .img file as a raster
* Turn raster into a data.frame of points (coordinates) and values
* Dividing the points into 100 equal-area rings
* Calculate Built-up Area/Urban Extent for each ring
* Turn dataframe into raster</description>
    </item>
    
    <item>
      <title>How to Draw Heatmap with Colorful Dendrogram</title>
      <link>https://liuyanguu.github.io/post/2018/07/16/how-to-draw-heatmap-with-colorful-dendrogram/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liuyanguu.github.io/post/2018/07/16/how-to-draw-heatmap-with-colorful-dendrogram/</guid>
      <description>DataVersion 1: Color both the branches and labelsVersion 2: color only the labels.Version 3: If there is no color, and we do not reorder the branchesThis data visualization example include:
* Hierarchical clustering, dendrogram and heat map based on normalized odds ratios
* The dendrogram was built separately to give color to dendrogram’s branches/labels based on cluster using dendextend
* Heatmap is made by heatmap.2 from gplots using the built dendrogram</description>
    </item>
    
  </channel>
</rss>
